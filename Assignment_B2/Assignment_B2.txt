Main.java:
/*import java.lang.*;
import java.io.*;
*/
public class Main {
    int roll;
    int marks;
    //Constructor
    public Main()
    {
        roll=20;
        marks=88;
    }
    public static void main(String[] args)
    {
        Main t=new Main();
        t.marks++;
        System.out.println("roll no:"+t.roll+" Marks:"+t.marks);
        t.roll--;
    }
}

ASSIGNMENR_B2.l:
%{
#include<stdio.h>
#include "string.h"
struct Symbol{
    char name[20];
}Sym[10];
void insert(char*);
int flag=0;
int i;
int cnt=0;
int commentflag=0;

%}

%%
"import"+" "+"java."[a-zA-Z]*+".*;"                                     {if(commentflag==0){printf("Preprocessor directives: %s",yytext);}else{printf(yytext);}printf("\n");}
"void"|"main"|"public"|"System"|"out"|"println"|"class"|"static"        {if(commentflag==0){printf("keywords: %s",yytext);}else{printf(yytext);}printf("\n");}
"public"+" "+"class"+" "+[_a-zA-Z]+[_]*[_a-zA-Z0-9]+                    {if(commentflag==0){size_t len=strlen(yytext);char subtext[10];strncpy(subtext,&yytext[13],len-13);subtext[len-13]='\0';printf("Identifier: %s", subtext);}else{printf(yytext);}printf("\n");}     
"int"|"String"|"char"                                                   {if(commentflag==0){printf("Data-Types: %s",yytext);}else{printf(yytext);}printf("\n");}
[)(}{]                                                                  {if(commentflag==0){if(commentflag==0){printf("Brackets: %s",yytext);}else{printf(yytext);}printf("\n");}}
"//"+[a-zA-Z0-9]*                                                       {if(commentflag==0){printf("Comment: %s",yytext);}else{printf(yytext);}printf("\n");}
"++"|"--"+[_a-zA-Z0-9]+"."+[_a-zA-Z0-9]+                                {if(commentflag==0){printf("Unary Operator: %s",yytext);}else{printf(yytext);}printf("\n");}
[-=+/*]                                                                 {if(commentflag==0){printf("Arithmetic Operators: %s",yytext);}else{printf(yytext);}printf("\n");}
[,.;]                                                                   {if(commentflag==0){printf("Delimiter: %s",yytext);}else{printf(yytext);}printf("\n");}
[0-9]+                                                                  {if(commentflag==0){printf("Number: %s",yytext);}else{printf(yytext);}printf("\n");}
[_a-zA-Z][_a-zA-Z0-9]*                                                  {if(commentflag==0){printf("Variables: %s",yytext);insert(yytext);}else{printf(yytext);}printf("\n");}
"/*"                                                                    {commentflag=1;printf("Comment Starts:");}
"*/"                                                                    {commentflag=0;printf("Comment Ends");printf("\n");}
%%
void insert(char* x)
{
    for(i=0;i<cnt;i++)
    {
        if(strcmp(x,Sym[i].name))
        {
            flag=1;
            break;
        }
    }

      if(flag==0)
      {
        strcpy(Sym[cnt].name,x);
        cnt++;
      }
}

void main()
{
FILE *fp;
fp = fopen("Main.java","r");
yyin = fp;
yylex();

printf("index | name");
printf("\n");
for(i=0;i<cnt;i++)
{
    printf("%d | ",i);
    printf("%s",Sym[i].name);
    printf("\n");
}
}

int yywrap()
{
return(1);
}

OUTPUT:
Comment Starts:import java.lang.*;

import java.io.*;

Comment Ends

Identifier: Main
 Brackets: {

    Data-Types: int
 Variables: roll
Delimiter: ;

    Data-Types: int
 Variables: marks
Delimiter: ;

    Comment: //Constructor

    keywords: public
 Variables: Main
Brackets: (
Brackets: )

    Brackets: {

        Variables: roll
Arithmetic Operators: =
Number: 20
Delimiter: ;

        Variables: marks
Arithmetic Operators: =
Number: 88
Delimiter: ;

    Brackets: }

    keywords: public
 keywords: static
 keywords: void
 keywords: main
Brackets: (
Data-Types: String
[] Variables: args
Brackets: )

    Brackets: {

        Variables: Main
 Variables: t
Arithmetic Operators: =
Variables: new
 Variables: Main
Brackets: (
Brackets: )
Delimiter: ;

        Variables: t
Delimiter: .
Variables: marks
Unary Operator: ++
Delimiter: ;

        keywords: System
Delimiter: .
keywords: out
Delimiter: .
keywords: println
Brackets: (
"Variables: roll
 Variables: no
:"Arithmetic Operators: +
Variables: t
Delimiter: .
Variables: roll
Arithmetic Operators: +
" Variables: Marks
:"Arithmetic Operators: +
Variables: t
Delimiter: .
Variables: marks
Brackets: )
Delimiter: ;

        Variables: t
Delimiter: .
Variables: roll
Arithmetic Operators: -
Arithmetic Operators: -
Delimiter: ;

    Brackets: }

Brackets: }

index | name
0 | roll