31172 Assignment_A1

CODE:
import java.io.*;
import java.util.*;
import java.util.regex.Pattern;

class Opcode {
    public HashMap<String,String> data = new HashMap<>();
    public HashMap<String,String> mnemonic = new HashMap<>();
    public HashMap<String,String> directive = new HashMap<>();
    public HashMap<String,String> condition = new HashMap<>();
    public HashMap<String,String> register = new HashMap<>();
    public HashMap Symbol = new HashMap();
    public LinkedHashMap lit_table = new LinkedHashMap();
    public ArrayList<String> pool_table = new ArrayList();
    public ArrayList<String>  S_index= new ArrayList();
    public ArrayList<String>  L_index= new ArrayList();
    String [][] opcode = new String[50][4];
    int line_count=0;

    Opcode(){
        line_count=0;

        //DS Table
        data.put("DC","1");
        data.put("DS","2");

        //IS Table
        mnemonic.put("ADD","1");
        mnemonic.put("SUB","2");
        mnemonic.put("MUL","3");
        mnemonic.put("DIV","4");
        mnemonic.put("MOVER","5");
        mnemonic.put("MOVEM","6");
        mnemonic.put("READ","7");
        mnemonic.put("PRINT","8");
        mnemonic.put("COMP","9");
        mnemonic.put("BC","10");
        mnemonic.put("STOP","11");

        //AD Table
        directive.put("START","1");
        directive.put("END","2");
        directive.put("ORIGIN","3");
        directive.put("LTORG","4");
        directive.put("EQU","5");

        //Condition Table
        condition.put("LT","21");
        condition.put("GT","22");
        condition.put("LTE","23");
        condition.put("GTE","24");

        //Register Table
        register.put("AREG","31");
        register.put("BREG","32");
        register.put("CREG","33");
        register.put("DREG","34");
        register.put("LE","35");
    }

    public void convertToOpcode(Scanner br) throws IOException {
        String st;
        int LC = 0;
        while(br.hasNextLine()){
            st = br.nextLine();
            String[] split_words = st.split("\t");

            if(line_count==0){
                LC = Integer.parseInt(split_words[2]);
                opcode[line_count][0] = split_words[1];
                opcode[line_count][1] = "(AD,1)";
                line_count ++;
            }
            else{
                if(split_words[0]!=null && !split_words[0].isEmpty()){
                    Symbol.put(split_words[0],LC);
                    S_index.add(split_words[0]);
                }
                if(mnemonic.containsKey(split_words[1])){
                    opcode[line_count][0] = split_words[1];
                    opcode[line_count][1] = "(IS," + mnemonic.get(split_words[1]) + ")";
                    if(split_words[1].equals("STOP")){

                    }else if(register.containsKey(split_words[2])){
                        opcode[line_count][2] = "(" + register.get(split_words[2]) + ")";
                       if(split_words[3].charAt(0) == '='){
                           lit_table.put(split_words[3],999);
                           L_index.add(split_words[3]);
                           opcode[line_count][3] = "(C,"+(L_index.indexOf(split_words[3])+1) + ")";
                       }else{
                           if(Symbol.containsKey(split_words[3])){
                               opcode[line_count][3] = "(S,"+(S_index.indexOf(split_words[3])+1)+")";
                           }else{
                               S_index.add(split_words[3]);
                               Symbol.put(split_words[3],999);
                               opcode[line_count][3] = "(S,"+(S_index.indexOf(split_words[3])+1)+")";
                           }
                       }
                    }
                    else if(split_words[1].equals("PRINT")){
                        if(Symbol.containsKey(split_words[2])){
                            opcode[line_count][2] = "(S" + (S_index.indexOf(split_words[2])+1)+")";
                        }else{
                            S_index.add(split_words[2]);
                            Symbol.put(split_words,999);
                            opcode[line_count][2] = "(S," + (S_index.indexOf(split_words[2])+1)+")";
                        }
                    }

                    LC=LC+1;
                }
                else if(data.containsKey(split_words[1])){
                    opcode[line_count][0] = split_words[1];
                    opcode[line_count][1] = "(DL," + data.get(split_words[1]) +")";
                    if(split_words[1].equals("DS"))
                    {
                        opcode[line_count][2] = "(C," + split_words[2] + ")";
                        LC+=Integer.parseInt(split_words[2]);
                    }
                    else{
                        opcode[line_count][2] = "(C,1)";
                        LC+=1;
                    }
                }
                else if(directive.containsKey(split_words[1])){
                    opcode[line_count][0] = split_words[1];
                    opcode[line_count][1] = "(AD," + directive.get(split_words[1]) +")";
                    if(split_words[1].equals("ORIGIN")){
                        try{
                            LC = Integer.parseInt(split_words[2]);
                        }catch (NumberFormatException err){
                            if(split_words[2].contains("+")){
                                String[] sp = split_words[2].split(Pattern.quote("+"));
                                LC = (int)Symbol.get(sp[0]) + Integer.parseInt(sp[1]);
                            }
                            else{
                                String[] sp = split_words[2].split(Pattern.quote("-"));
                                LC = (int)Symbol.get(sp[0]) + Integer.parseInt(sp[1]);
                            }
                        }
                    }
                    else if(split_words[1].equals("LTORG")||split_words[1].equals("END")){
                        int flag=0;
                        Iterator lit = lit_table.entrySet().iterator();
                        while(lit.hasNext()){
                            Map.Entry litelement = (Map.Entry)lit.next();
                            int value = (int)litelement.getValue();
                            String key = (String) litelement.getKey();
                            if(value==999){
                                if(flag==0){
                                    pool_table.add("#"+(L_index.indexOf(key)+1));
                                    flag=1;
                                }
                                lit_table.replace(litelement.getKey(),LC);
                                LC++;
                            }
                        }
                    }else if(split_words[1].equals("EQU")){
                        S_index.add(split_words[0]);
                        int l;
                        if(split_words[2].contains("+")){
                            String[] wo = (split_words[2]).split(Pattern.quote("+"));
                            l = (int)Symbol.get(wo[0]);
                            l = l+ Integer.parseInt(wo[1]);
                        }else if(split_words[2].contains("-")){
                            String[] wo = (split_words[2]).split(Pattern.quote("-"));
                            l = (int)Symbol.get(wo[0]);
                            l = l - Integer.parseInt(wo[1]);
                        } else{
                            l = (int) Symbol.get(split_words[2]);
                        }
                        Symbol.put(split_words[0],l);
                    }
                }
                line_count++;
            }
        }
    }

    public void writeOpcode(FileWriter bw) throws IOException {
        System.out.println("Opcode Table");
        for(int i=0;i<line_count;i++){
            for(int j=0;j<opcode[i].length;j++){
                if(opcode[i][j]!=null){
                    System.out.print(opcode[i][j]+"\t");
                    bw.write(opcode[i][j] + "\t");
                }
            }
            System.out.print("\n");
            bw.write("\n");
        }
    }

    public void writeSymbolTable(FileWriter bw){
        System.out.println("\nSYMBOL TABLE:");
        Symbol.forEach((key, value) -> {
            System.out.println(key + " " + value);
            try {
                bw.write(key+" "+value+"\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        });

    }

    public void printLitTable(FileWriter bw) {
        System.out.println("\nLITERAL TABLE:");
        lit_table.forEach((key, value) -> {
            try {
                bw.write(key+" "+value+"\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
            System.out.println(key + " " + value);
        });
    }

    public void printPool(FileWriter bw) throws IOException {
        System.out.println("\nPOOL TABLE:");
        for(int i=0;i<pool_table.size();i++){
            bw.write(pool_table.get(i) + "\n");
            System.out.println(pool_table.get(i));
        }
    }
}


public class Assignment_A1 {
    public static void main(String []args) throws IOException {
        Opcode op = new Opcode();
        String path="C:\\Users\\varun karwa\\Desktop\\31172_Assignments\\SPOSL_31172\\Assignment_A1\\src\\input2.txt";
        File file = new File(path);
        Scanner reader = new Scanner(file);
        op.convertToOpcode(reader);
        reader.close();

        FileWriter writer = new FileWriter("opcode.txt");
        op.writeOpcode(writer);
        writer.close();

        writer = new FileWriter("symbol.txt");
        op.writeSymbolTable(writer);
        writer.close();

        writer = new FileWriter("literal.txt");
        op.printLitTable(writer);
        writer.close();

        writer = new FileWriter("pool.txt");
        op.printPool(writer);
        writer.close();
    }
}


OUTPUT:
Opcode Table
START	(AD,1)	
DS	(DL,2)	(C,3)	
MOVER	(IS,5)	(31)	(S,3)	
ADD	(IS,1)	(31)	(S,4)	
MOVEM	(IS,6)	(32)	(C,1)	
MOVEM	(IS,6)	(32)	(C,2)	
LTORG	(AD,4)	
MOVEM	(IS,6)	(33)	(C,3)	
DC	(DL,1)	(C,1)	
DC	(DL,1)	(C,1)	
END	(AD,2)	

SYMBOL TABLE:
A 100
B 111
C 110
L1 103

LITERAL TABLE:
=10 107
=5 108
=1 112

POOL TABLE:
#1
#3

Process finished with exit code 0