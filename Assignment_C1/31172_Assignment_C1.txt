Assignment C1:

1.First Come First Serve:
CODE:

import java.util.*;

public class FCFS {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Number of Process: ");
        int n = sc.nextInt();
        int processid[] = new int[n];
        int arrival[] = new int[n];
        int burst[] = new int[n];
        int complete[] = new int[n];
        int i, key, j, temp1, temp2;
        float avgta = 0, avgw = 0;
        for(i=0;i<n;i++){
            System.out.println("Enter Arrival Time for process " + (i+1));
            arrival[i] = sc.nextInt();
            System.out.println("Enter Burst Time for process " + (i+1));
            burst[i] = sc.nextInt();
            processid[i] = i+1;
            key = arrival[i];
            temp1 = burst[i];
            temp2 = processid[i];
            j = i-1;
            while(j>=0 && arrival[j] > key){
                arrival[j+1] = arrival[j];
                burst[j+1] = burst[j];
                processid[j+1] = processid[j];
                j = j-1;
            }
            arrival[j+1] = key;
            processid[j+1] = temp2;
            burst[j+1] = temp1;
        }

	System.out.println("\nSequence:");
        for(i=0;i<n;i++){
	    System.out.print(i+"\t");
            if(i==0){
                complete[i] = arrival[i] + burst[i];
            }
            else{
                if(complete[i-1]<arrival[i]){
                    complete[i] = arrival[i] + burst[i];
                }
                else{
                    complete[i] = complete[i-1]+burst[i];
                }
            }
        }
        System.out.println("Id\tA\tB\tT\tW");
        for(i=0;i<n;i++){
            System.out.println(processid[i]+"\t"+arrival[i]+"\t"+burst[i]+"\t"+(complete[i]-arrival[i])+"\t"+(complete[i]-arrival[i]-burst[i]));
            avgta += complete[i]-arrival[i];
            avgw += complete[i]-arrival[i]-burst[i];
        }
        System.out.println("Average turnaround time: "+avgta/n);
        System.out.println("Average waiting time: "+avgw/n);
    }
};

OUTPUT:

Enter Number of Process: 
4
Enter Arrival Time for process 1
0
Enter Burst Time for process 1
5
Enter Arrival Time for process 2
4
Enter Burst Time for process 2
3
Enter Arrival Time for process 3
1
Enter Burst Time for process 3
6
Enter Arrival Time for process 4
2
Enter Burst Time for process 4
5

Sequence:
1	3	4	2	
Id	A	B	T	W
1	0	5	5	0
3	1	6	10	4
4	2	5	14	9
2	4	3	15	12
Average turnaround time: 11.0
Average waiting time: 6.25

Process finished with exit code 0


2. Priority Non-Preemptive
CODE:

import java.util.*;

public class Priority_S {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number of processes");
        int n = sc.nextInt();
        int priority[] = new int[n];
        int burst[] = new int[n];
        int arrival[] = new int[n];
        int complete[] = new int[n];
        int process[] = new int[n];
        int executed[] = new int[n];
        int i,j,key,temp1,temp2,temp3,temp4;
        float avgta = 0, avgw = 0;
        for(i=0;i<n;i++){
            System.out.println("Enter arrival time for process "+(i+1));
            arrival[i] = sc.nextInt();
            System.out.println("Enter burst time for process "+(i+1));
            burst[i] = sc.nextInt();
            System.out.println("Enter priority for process "+(i+1));
            priority[i] = sc.nextInt();
            process[i] = i+1;
            executed[i]=0;
            key = arrival[i];
            temp1 = burst[i];
            temp2 = process[i];
            temp3 = priority[i];
            temp4 = executed[i];
            j = i-1;
            while(j>=0 && arrival[j] > key){
                arrival[j+1] = arrival[j];
                burst[j+1] = burst[j];
                process[j+1] = process[j];
                priority[j+1] = priority[j];
                executed[j+1] = executed[j];
                j = j-1;
            }
            arrival[j+1] = key;
            burst[j+1] = temp1;
            process[j+1] = temp2;
            priority[j+1] = temp3;
            executed[j+1] = temp4;
        }

        int current = 0;
        System.out.print("Sequence: ");
        for(i=0;i<n;i++){
            int p=n+1;
            int index=-1;
            for(j=0;j<n;j++){
                if(executed[j]!=1&&current>=arrival[j]&&priority[j]<p){
                    p=priority[j];
                    index=j;
                }
            }
            if(index!=-1){
                System.out.print(index+1+"\t");
                complete[index] = current+burst[index];
                current = complete[index];
                executed[index]=1;
            }
        }
        System.out.println("\nId\tA\tB\tT\tW\tP");
        for(i=0;i<n;i++){
            System.out.println(process[i]+"\t"+arrival[i]+"\t"+burst[i]+"\t"+(complete[i]-arrival[i])+"\t"+(complete[i]-arrival[i]-burst[i])+"\t"+priority[i]);
            avgta += complete[i]-arrival[i];
            avgw += complete[i]-arrival[i]-burst[i];
        }
        System.out.println("Average turnaround time: "+avgta/n);
        System.out.println("Average waiting time: "+avgw/n);
    }
}

OUTPUT:

Enter number of processes
4
Enter arrival time for process 1
0
Enter burst time for process 1
6
Enter priority for process 1
2
Enter arrival time for process 2
0
Enter burst time for process 2
4
Enter priority for process 2
1
Enter arrival time for process 3
2
Enter burst time for process 3
5
Enter priority for process 3
1
Enter arrival time for process 4
4
Enter burst time for process 4
3
Enter priority for process 4
4
Sequence: 2	3	1	4	
Id	A	B	T	W	P
1	0	6	15	9	2
2	0	4	4	0	1
3	2	5	7	2	1
4	4	3	14	11	4
Average turnaround time: 10.0
Average waiting time: 5.5

Process finished with exit code 0



3.SJF Preemptive:
CODE:

import java.util.*;

public class SJF_PREEM {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Number of Process: ");
        int n = sc.nextInt();
        int processid[] = new int[n];
        int arrival[] = new int[n];
        int burst[] = new int[n];
        int waittime[] = new int[n];
        int remaintime[] = new int[n];
        int i, key, j, temp1, temp2;
        float avgta = 0, avgw = 0;
        for(i=0;i<n;i++){
            System.out.println("Enter Arrival Time for process " + (i+1));
            arrival[i] = sc.nextInt();
            System.out.println("Enter Burst Time for process " + (i+1));
            burst[i] = sc.nextInt();
            processid[i] = i+1;
            key = arrival[i];
            temp1 = burst[i];
            temp2 = processid[i];
            j = i-1;
            while(j>=0 && arrival[j] > key){
                arrival[j+1] = arrival[j];
                burst[j+1] = burst[j];
                remaintime[j+1] = burst[j];
                processid[j+1] = processid[j];
                j = j-1;
            }
            arrival[j+1] = key;
            processid[j+1] = temp2;
            burst[j+1] = temp1;
            remaintime[j+1] = temp1;
        }

        int complete = 0, current = 0, minm = Integer.MAX_VALUE;
        int shortest = 0, finish_time;
        boolean check = false;
        System.out.println("\nSequence:");
        while(complete!=n){
            for(j=0;j<n;j++){
                if(arrival[j]<=current && remaintime[j]<minm && remaintime[j]>0){
                    minm=remaintime[j];
                    shortest=j;
                    check=true;
                }
            }
            if(check == false){
                current++;
                continue;
            }

            remaintime[shortest]--;
            System.out.print((shortest+1)+"\t");
            minm = remaintime[shortest];

            if(remaintime[shortest]==0){
                minm=Integer.MAX_VALUE;
                complete++;
                check=false;
                finish_time = current+1;
                waittime[shortest] = finish_time - arrival[shortest] - burst[shortest];
                if(waittime[shortest]<0){
                    waittime[shortest]=0;
                }
            }
            current++;
        }

        System.out.println("\nId\tA\tB\tT\tW");
        for(i=0;i<n;i++){
            System.out.println(processid[i]+"\t"+arrival[i]+"\t"+burst[i]+"\t"+(waittime[i] + burst[i])+"\t"+waittime[i]);
            avgta += waittime[i] + burst[i];
            avgw += waittime[i];
        }
        System.out.println("Average turnaround time: "+avgta/n);
        System.out.println("Average waiting time: "+avgw/n);
    }
};

OUTPUT:

Enter Number of Process: 
4
Enter Arrival Time for process 1
1
Enter Burst Time for process 1
6
Enter Arrival Time for process 2
1
Enter Burst Time for process 2
8
Enter Arrival Time for process 3
2
Enter Burst Time for process 3
7
Enter Arrival Time for process 4
3
Enter Burst Time for process 4
3

Sequence:
1	1	4	4	4	1	1	1	1	3	3	3	3	3	3	3	2	2	2	2	2	2	2	2	

Id	A	B	T	W
1	1	6	9	3
2	1	8	24	16
3	2	7	15	8
4	3	3	3	0
Average turnaround time: 12.75
Average waiting time: 6.75

Process finished with exit code 0


4.Round Robin:
CODE:

import java.util.*;

public class RR {
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Number of Process: ");
        int n = sc.nextInt();
        System.out.println("Enter Quant Time:");
        int quant = sc.nextInt();
        int processid[] = new int[n];
        int arrival[] = new int[n];
        int burst[] = new int[n];
        int rem_time[] = new int[n];
        int completion[] = new int[n];
        int i, key, j, temp1, temp2;
        float avgta = 0, avgw = 0;
        for(i=0;i<n;i++){
            System.out.println("Enter Arrival Time for process " + (i+1));
            arrival[i] = sc.nextInt();
            System.out.println("Enter Burst Time for process " + (i+1));
            burst[i] = sc.nextInt();
            processid[i] = i+1;
            key = arrival[i];
            temp1 = burst[i];
            temp2 = processid[i];
            j = i-1;
            while(j>=0 && arrival[j] > key){
                arrival[j+1] = arrival[j];
                burst[j+1] = burst[j];
                rem_time[j+1] = burst[j];
                processid[j+1] = processid[j];
                j = j-1;
            }
            arrival[j+1] = key;
            processid[j+1] = temp2;
            burst[j+1] = temp1;
            rem_time[j+1] = temp1;
        }

        int current_time = 0;
        int arr = 0 ;

        System.out.println("\nSequence:");
        while(true){
            boolean done=true;
            for(i=0;i<n;i++){
                if(rem_time[i]>0){
                    done = false;
                    if(rem_time[i]>quant && arrival[i]<=arr){
                        current_time += quant;
                        rem_time[i] -= quant;
                        arr++;
                        System.out.println(current_time + "\t" + i);
                    }
                    else{
                        if(arrival[i]<=arr){
                            arr++;
                            current_time+=rem_time[i];
                            rem_time[i]=0;
                            completion[i] = current_time;
                            System.out.println(current_time + "\t" + i);
                        }
                    }
                }
            }
            if(done==true){
                break;
            }
        }

        System.out.println("\nId\tA\tB\tT\tW");
        for(i=0;i<n;i++){
            System.out.println(processid[i]+"\t"+arrival[i]+"\t"+burst[i]+"\t"+(completion[i]-arrival[i])+"\t"+(completion[i]-arrival[i]-burst[i]));
            avgta += completion[i]-arrival[i];
            avgw += completion[i]-arrival[i]-burst[i];
        }
        System.out.println("Average turnaround time: "+avgta/n);
        System.out.println("Average waiting time: "+avgw/n);
    }
};

OUTPUT:

Enter Number of Process: 
4
Enter Quant Time:
2
Enter Arrival Time for process 1
0
Enter Burst Time for process 1
5
Enter Arrival Time for process 2
1
Enter Burst Time for process 2
4
Enter Arrival Time for process 3
2
Enter Burst Time for process 3
2
Enter Arrival Time for process 4
3
Enter Burst Time for process 4
1

Sequence:
2	0
4	1
6	2
7	3
9	0
11	1
12	0

Id	A	B	T	W
1	0	5	12	7
2	1	4	10	6
3	2	2	4	2
4	3	1	4	3
Average turnaround time: 7.5
Average waiting time: 4.5

Process finished with exit code 0
